<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20657049" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa o objeto passado para procedimento de retorno de chamada do cada faixa de opções controle interface do usuário (UI).</summary>
    <remarks>
      <para>O objeto <b>IRibbonControl</b> contém o nome (ID) do controle e do objeto <b>Window</b> atual para o controle de interface do usuário.</para>
      <para />
    </remarks>
    <example>
      <para>O exemplo a seguir, criado em c#, mostra dois procedimentos chamados do procedimento de evento <b>onAction</b> de um controle de botão e um controle ToggleButton. No primeiro procedimento, o objeto <b>IRibbonControl</b> que representa o controle é passado para o procedimento e uma caixa de mensagem é exibida indicando que o botão foi pressionado, juntamente com a ID do botão. O segundo procedimento é semelhante ao primeiro com a adição de um parâmetro <b>booleano</b> , indicando que o botão foi pressionado.</para>
      <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa a janela ativa contendo a interface do usuário Ribbon que dispara um procedimento de retorno de chamada. Somente leitura.</summary>
        <value>Objeto</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a ID do controle especificado no arquivo de personalização de marcação Ribbon XML. Somente leitura.</summary>
        <value>String</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Usado para armazenar sequências de caracteres arbitrárias e buscá-las no tempo de execução. Somente leitura</summary>
        <value>String</value>
        <remarks>
          <para>Normalmente, você pode distinguir entre os controles em um faixa de opções usuário interface arquivo de personalização XML usando a propriedade <b>Id</b> . No entanto, existem restrições sobre o que podem conter IDs (sem caracteres não alfanuméricos e eles devem ser todos exclusivo).  A propriedade <b>Tag</b> não tem essas restrições e assim possa ser usado em situações a seguir, onde a ID não funciona:</para>
          <list type="bullet">
            <item>
              <para>se você precisar armazenar uma cadeia de caracteres especial com seu controle como um nome de arquivo.  Por exemplo: tag="C:\path\file.xlsm."</para>
            </item>
            <item>
              <para>Se desejar que vários controles serão tratadas da mesma maneira pelo seus procedimentos de retorno de chamada, mas você não deseja manter uma lista de todos os seus IDs (que devem ser exclusivos).  Por exemplo, você poderia ter botões nas diferentes guias na faixa de opções, tudo isso com marca = "blue" e verifique a propriedade <b>Tag</b> em vez da propriedade <b>ID</b> apenas quando perfroming alguma ação comuns.</para>
            </item>
          </list>
          <para />
          <para />
        </remarks>
        <example>
          <para>No XML usado para personalizar a interface do usuário da faixa de opções, você pode definir uma marca da seguinte maneira. Quando a ação MyFunction é chamada, você pode ler a propriedade <b>Tag</b> , que será igual a "alguma cadeia de caracteres".</para>
          <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>