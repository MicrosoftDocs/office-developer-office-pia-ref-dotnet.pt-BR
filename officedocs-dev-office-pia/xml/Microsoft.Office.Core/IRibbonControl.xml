<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20657049" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d7d84-101">Representa o objeto passado para procedimento de retorno de chamada do cada faixa de opções controle interface do usuário (UI).</span>
      <span class="sxs-lookup">
        <span data-stu-id="d7d84-101">Represents the object passed into every Ribbon user interface (UI) control's callback procedure.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="d7d84-102">
        <para>O objeto <b>IRibbonControl</b> contém o nome (ID) do controle e do objeto <b>Window</b> atual para o controle de interface do usuário.</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="d7d84-102">
          <para>The <b>IRibbonControl</b> object  contains the name (ID) of the control and the current <b>Window</b> object for the Ribbon UI control.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="d7d84-103">
        <para>O exemplo a seguir, criado em c#, mostra dois procedimentos chamados do procedimento de evento <b>onAction</b> de um controle de botão e um controle ToggleButton. No primeiro procedimento, o objeto <b>IRibbonControl</b> que representa o controle é passado para o procedimento e uma caixa de mensagem é exibida indicando que o botão foi pressionado, juntamente com a ID do botão. O segundo procedimento é semelhante ao primeiro com a adição de um parâmetro <b>booleano</b> , indicando que o botão foi pressionado.</para>
        <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="d7d84-103">
          <para>The following example, written in C#,  shows two procedures called from the <b>onAction</b> event procedure  of a Button control and a ToggleButton control. In the first procedure, the <b>IRibbonControl</b> object representing the control is passed into the procedure and a message box is displayed indicating that the button was pressed along with the ID of the button. The second procedure is similar to the first with the addition of a <b>Boolean</b> parameter indicating that the button was pressed.</para>
          <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7d84-p101">Representa a janela ativa contendo a interface do usuário Ribbon que dispara um procedimento de retorno de chamada. Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-p101">Represents the active window containing the Ribbon user interface that triggers a callback procedure. Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7d84-106">Objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-106">Object</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7d84-p102">Obtém a ID do controle especificado no arquivo de personalização de marcação Ribbon XML. Somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-p102">Gets the ID of the control specified in the Ribbon XML markup customization file. Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7d84-109">String</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-109">String</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7d84-p103">Usado para armazenar sequências de caracteres arbitrárias e buscá-las no tempo de execução. Somente leitura</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-p103">Used to store arbitrary strings and fetch them at runtime. Read-only</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7d84-112">String</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-112">String</span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="d7d84-113">
            <para>Normalmente, você pode distinguir entre os controles em um faixa de opções usuário interface arquivo de personalização XML usando a propriedade <b>Id</b> . No entanto, existem restrições sobre o que podem conter IDs (sem caracteres não alfanuméricos e eles devem ser todos exclusivo).  A propriedade <b>Tag</b> não tem essas restrições e assim possa ser usado em situações a seguir, onde a ID não funciona:</para>
            <list type="bullet">
              <item>
                <para>se você precisar armazenar uma cadeia de caracteres especial com seu controle como um nome de arquivo.  Por exemplo: tag="C:\path\file.xlsm."</para>
              </item>
              <item>
                <para>Se desejar que vários controles serão tratadas da mesma maneira pelo seus procedimentos de retorno de chamada, mas você não deseja manter uma lista de todos os seus IDs (que devem ser exclusivos).  Por exemplo, você poderia ter botões nas diferentes guias na faixa de opções, tudo isso com marca = "blue" e verifique a propriedade <b>Tag</b> em vez da propriedade <b>ID</b> apenas quando perfroming alguma ação comuns.</para>
              </item>
            </list>
            <para />
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-113">
              <para>Normally you can distinguish between controls in a Ribbon user interface XML customization file using the <b>Id</b> property. However, there are restrictions on what IDs can contain (no non-alphanumeric characters, and they must all be unique).  The <b>Tag</b> property doesn’t have these restrictions and so it can be used in the following situations, where ID doesn’t work:</para>
              <list type="bullet">
                <item>
                  <para>If you need to store a special string with your control such as a filename.  For example: tag=”C:\path\file.xlsm.”</para>
                </item>
                <item>
                  <para>If you want multiple controls to be treated the same way by your callback procedures, but you don’t want to maintain a list of all of their IDs (which must be unique).  For example, you could have buttons on different tabs on the Ribbon, all with tag=”blue”, and then just check the <b>Tag</b> property instead of the <b>ID</b> property when perfroming some common action.</para>
                </item>
              </list>
              <para />
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="d7d84-114">
            <para>No XML usado para personalizar a interface do usuário da faixa de opções, você pode definir uma marca da seguinte maneira. Quando a ação MyFunction é chamada, você pode ler a propriedade <b>Tag</b> , que será igual a "alguma cadeia de caracteres".</para>
            <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d7d84-114">
              <para>In the  XML used to customize the Ribbon user interface, you can set a tag as follows. When the MyFunction action is called, you can read the <b>Tag</b> property, which will be equal to “some string”. </para>
              <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>